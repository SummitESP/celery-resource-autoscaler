[metadata]
name = 'celery-resource-autoscaler'
version = '0.0.1'
description = 'Celery plugin to autoscale based on available CPU, memory, or other system attributes.'
author = 'Jack Cushman'
author_email = 'jcushman@law.harvard.edu'
license = 'MIT'
url = 'https://github.com/jcushman/celery-resource-autoscaler'

[requires]
python_version = ['3.10', 'pypy3']

[build-system]
requires = ['setuptools', 'wheel']

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "migrations",
    "tests",
    "tests.py",
    "test_*.py"
]

line-length = 99

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = ["F403", "E722", "F405"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
preview = true
# Setting this to preserve to avoid massive changes until we get more
# files formatted. In the future we can set this to double.
quote-style = "preserve"
# quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"


[tool.bandit]
#  To mark something to skip, add "# nosec" at end of line
exclude_dirs = [
             "tests",
             "**/tests.py",
             "**/test.py",
             "backend/utils/sentry.py",
             "backend/utils/git.py",
             "backend/settings/local-dist.py",
             "backend/settings/local.py",
             "backend/settings/base.py",
             "backend/management/commands/test_db_performance.py",
             "backend/templatetags/render_vite_bundle.py",
             "backend/management/commands/generate_performance_data.py",
             ]


[tool.mypy]
# https://mypy.readthedocs.io/en/stable/config_file.html

files = ["backend/**/*.py"]
exclude = [
    "tests/.*\\.py$",
    "test(s)*\\.py",
    "migrations",
    "management",
    "settings"
]

disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true

follow_imports = "skip"
strict_optional = true
implicit_optional = true

warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true

show_error_codes = true
pretty = true

ignore_missing_imports = true

python_version = "3.10"

[[tool.mypy.overrides]]
module = [
    "requests"
]
ignore_missing_imports = true
